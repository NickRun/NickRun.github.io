{"title":"Shared State and Methods in VueJS","post_type":"notes","publish_date":"April 22, 2016","body":"<h3 class=\"no-top-margin\">Shared State and Methods with Vue</h3>\n\n<p>A Vue app is comprised of many <a href=\"https://vuejs.org/guide/components.html\" title=\"Vue Components Explained\">components</a>. Often times components need to share data. An easy and elegant way to solve this is by introducing a “shared state”. A shared state is one central repository for all components to get and set data from.</p>\n<p>For larger projects, <a href=\"https://facebook.github.io/flux/docs/overview.html\" title=\"Flux Overview\">flux</a> inspired architecture <a href=\"https://github.com/vuejs/vuex\" title=\"Vuex\">Vuex</a> is recommended. </p>\n<p>If Vuex feels like “too much” architecture here’s another way:</p>\n<ul>\n<li>Keep central data in store.js <a href=\"https://github.com/NickRun/vue-modular-component-methods/blob/master/src/store.js\" title=\"Store.js example\">example</a></li>\n<li>Keep methods as separate js modules and import store as needed <a href=\"https://github.com/NickRun/vue-modular-component-methods/blob/master/src/methods/changeMessage.js\">example</a></li>\n<li>In components point data to store and import methods as needed <a href=\"https://github.com/NickRun/vue-modular-component-methods/blob/master/src/components/App.vue\">example</a></li>\n</ul>\n<p>Full code example (made with <a href=\"https://github.com/vuejs/vue-cli\">vue-cli</a>): <a href=\"https://github.com/NickRun/vue-modular-component-methods\" title=\"Vuejs Modular Component Methods\">vue-module-component-methods</a></p>\n"}