{"title":"Modular Accessible Methods in VueJS","post_type":"notes","publish_date":"April 22, 2016","body":"<h3 class=\"no-top-margin\">vue-cli</h3>\n\n<p>It’s been a couple months since I started learning in VueJS. The <a href=\"https://twitter.com/youyuxi\" title=\"Evan You Twitter\">author of Vue</a> built a nice scaffolding tool to start Vue projects off with Webpack or Browserify. It’s called <a href=\"https://github.com/vuejs/vue-cli\" title=\"vue-cli scaffolding tool\">vue-cli</a>.</p>\n<h3 id=\"vue-components\">Vue Components</h3>\n<p>The best part of vue-cli are the Vue component files. </p>\n<p>For project structure that allows your application to grow, there’s “flux inspired” architecture <a href=\"https://github.com/vuejs/vuex\" title=\"vuex\">vuex</a>.</p>\n<p>There’s a great tutorial on how to implement vuex here: <a href=\"http://skyronic.com/2016/01/03/vuex-basics-tutorial/\">http://skyronic.com/2016/01/03/vuex-basics-tutorial/</a></p>\n<p>I found vuex to be too much architecture for my purposes so I mostly stick with the <a href=\"http://skyronic.com/2016/01/03/vuex-basics-tutorial/#solution-2-shared-state:13821831b3195014bcef9dd11de6b6e4\" title=\"VueJS shared state architecture\">shared state architecture</a>.</p>\n<p><span class=\"highlight\">I’ve seen people recommend attaching Vue component methods to the shared state store object, but that seemed to get too messy for me. Instead I break each method into its own es2015 module, and import to each component as needed. This keeps the code clean, modular, and allows me to share methods easily between components.</span></p>\n<p>Full code example here: <a href=\"https://github.com/NickRun/vue-modular-component-methods\" title=\"Vuejs Modular Component Methods\">vue-module-component-methods</a></p>\n"}