{"title":"Modular Globally Accessible Methods in VueJS","post_type":"notes","publish_date":"April 22, 2016","body":"<h3 class=\"no-top-margin\">vue-cli</h3>\n\n<p>It’s been a couple months since I started learning in VueJS. The <a href=\"https://twitter.com/youyuxi\" title=\"Evan You Twitter\">author of Vue</a> built a nice scaffolding tool to start Vue projects off with Webpack or Browserify. It’s called <a href=\"https://github.com/vuejs/vue-cli\" title=\"vue-cli scaffolding tool\">vue-cli</a>.</p>\n<h3 id=\"vue-components\">Vue Components</h3>\n<p>The best part of vue-cli are the Vue component files. </p>\n<p>Here’s what a typical Vue component file looks like:</p>\n<pre><code><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span> @<span class=\"hljs-attr\">click</span>= \"<span class=\"hljs-attr\">changeMessage</span>\"&gt;</span>\n    </span><span class=\"hljs-template-variable\">{{ sharedState.message }}</span><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data () {\n    <span class=\"hljs-keyword\">return</span> {\n      message: <span class=\"hljs-string\">'Hello'</span>\n    }\n  },\n  methods: {\n    changeMessage: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (store.state.message === <span class=\"hljs-string\">'Hello'</span>) {\n        store.state.message = <span class=\"hljs-string\">'Goodbye'</span>\n      } <span class=\"hljs-keyword\">else</span> {\n        store.state.message = <span class=\"hljs-string\">'Hello'</span>\n      }\n    }\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-id\">#app</span> {\n    <span class=\"hljs-attribute\">text-align</span>:center;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n</span>\n</code></pre><p>A Vue component file is parsed from its three sections: template, script, and style.</p>\n<p>This is cool, but what if you want to share the scope of your data object or methods with another component? One way to do this is by introducing the flux architecture by using <a href=\"https://github.com/vuejs/vuex\" title=\"vuex\">vuex</a>. </p>\n<p>There’s a great tutorial on how to implement vuex here: <a href=\"http://skyronic.com/2016/01/03/vuex-basics-tutorial/\">http://skyronic.com/2016/01/03/vuex-basics-tutorial/</a></p>\n<p>I found vuex to be too much architecture for my purposes so I use the <a href=\"http://skyronic.com/2016/01/03/vuex-basics-tutorial/#solution-2-shared-state:13821831b3195014bcef9dd11de6b6e4\" title=\"VueJS shared state architecture\">shared state architecture</a>.</p>\n<p>I’ve seen people recommend attaching Vue component methodsthe to the shared state store object, but that seemed to get too messy for me. Instead I break each method into its own es2015 module, and import to each component as needed. This keeps the code clean, modular, and allows me to share methods easily between components.</p>\n<p>My Vue component ends up looking like this:</p>\n<pre><code><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> @<span class=\"hljs-attr\">click</span>= \"<span class=\"hljs-attr\">changeMessage</span>\"&gt;</span>\n    </span><span class=\"hljs-template-variable\">{{ sharedState.message }</span><span class=\"xml\">}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-comment\">// Import Store</span>\n  <span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../store'</span>\n  <span class=\"hljs-comment\">// Import Methods</span>\n  <span class=\"hljs-keyword\">import</span> changeMessage <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../methods/changeMessage'</span>\n\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> </span></span><span class=\"hljs-template-variable\">{\n    data () {\n      return {\n        sharedState: store.state\n      }</span><span class=\"xml\"><span class=\"undefined\">\n    },\n    methods: </span></span><span class=\"hljs-template-variable\">{\n      changeMessage: changeMessage\n    }</span><span class=\"xml\"><span class=\"undefined\">\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n</span>\n</code></pre><p>Full code example here: <a href=\"https://github.com/NickRun/vue-modular-component-methods\" title=\"Vuejs Modular Component Methods\">vue-module-component-methods</a></p>\n"}